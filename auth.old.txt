import NextAuth from "next-auth"
import GoogleProvider from "@auth/core/providers/google"
import userModel from '@/mongoose/userSchema'
import dbConnect from "@/mongoose/mongodb";
// import { redirect } from "next/navigation";
declare module "@auth/core/types" {
  interface Session {
    role: String,
    applied:Boolean
  }
}
declare module "@auth/core/jwt" {
  interface JWT {
    role: String,
    applied:Boolean
  }
}
export const { handlers: { GET, POST }, auth, signIn, signOut,unstable_update } = NextAuth({
  providers: [GoogleProvider({
    clientId: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  }),],
  // basePath:'/api/auth',
  // secret:process.env.AUTH_SECRET,
  callbacks: {
    async signIn({ user, account, profile, email, credentials }) {
      // try {
      //   await dbConnect(); // Ensure proper database connection

      //   // Check if the user already exists in the database
      //   const existingUser = await userModel.findOne({ email: profile?.email });

      //   if (!existingUser) {
      //     // If the user doesn't exist, create a new user
      //     await userModel.create({
      //       email: profile?.email,
      //       name: profile?.name,
      //       picture: profile?.picture,
      //       role: 'student',
      //       applied:false,
      //     });
      //     console.log('New user created:', profile?.email);
      //   } else {
      //     console.log('Existing user: ', profile?.email);
      //   }
      // } catch (error) {
      //   console.error('Error during sign-in:', error);
      //   // Handle error appropriately, such as throwing it or returning false
      //   return false;
      // }
      return true
    },
    // async redirect({ url, baseUrl }) {
    //   return baseUrl
    // },
    async session({ session, user, token }) {
      // session.role = token.role
      // session.applied=token.applied
      // console.log(session)
      return session
    },
    async jwt({ token, user, account, profile,trigger,session }) {
      // if (trigger === "update" && session) {
      //   // Note, that `session` can be any arbitrary object, remember to validate it!
      //   token.applied = true;
      // }
      // if (user) {
      //   try {
      //     await dbConnect(); // Ensure proper database connection
      //     const existingUser = await userModel.findOne({ email: user.email });
      //     console.log('existing user', existingUser)
      //     // If the user exists, add their role to the session
      //     if (existingUser) {
      //       token.role = existingUser?.role ?? "student";
      //       token.applied = existingUser?.applied ?? false;
      //     }
      //   } catch (err) {
      //     console.log(err)
      //   }

      // }
     

      // console.log(token)
      return token
    }
  },
  session: { strategy: 'jwt' }
})